version: "3.8"

services:
  api_gateway:
    image: api_gateway
    container_name: api_gateway
    build:
      context: .
      dockerfile: ./backend/api_gateway/Dockerfile
    restart: on-failure
    ports:
      - ${GATEWAY_PORT}:${GATEWAY_PORT}
    environment:
      GATEWAY_PORT: ${GATEWAY_PORT}
      AUTHENTICATION_SERVICE_HOST: ${AUTHENTICATION_SERVICE_HOST}
      AUTHENTICATION_SERVICE_PORT: ${AUTHENTICATION_SERVICE_PORT}
      PROFILE_SERVICE_PORT: ${PROFILE_SERVICE_PORT}
      PROFILE_SERVICE_HOST: ${PROFILE_SERVICE_HOST}
      CONNECTION_SERVICE_PORT: ${CONNECTION_SERVICE_PORT}
      CONNECTION_SERVICE_HOST: ${CONNECTION_SERVICE_HOST}
      POST_SERVICE_PORT: ${POST_SERVICE_PORT}
      POST_SERVICE_HOST: ${POST_SERVICE_HOST}
    networks:
      - network

  authentication_service:
    image: authentication_service
    build:
      context: .
      dockerfile: ./backend/authentication_service/Dockerfile
    restart: on-failure
    environment:
      AUTH_DB_HOST: ${AUTHENTICATION_DB_HOST}
      AUTH_DB_PORT: ${AUTHENTICATION_DB_PORT}
      AUTH_SERVICE_PORT: ${AUTHENTICATION_SERVICE_PORT}
    depends_on:
      - authentication_db
    networks:
      - network

  profile_service:
    image: profile_service
    container_name: profile_service
    build:
      context: .
      dockerfile: ./backend/profile_service/Dockerfile
    restart: on-failure
    environment:
      PROFILE_DB_PORT: ${PROFILE_DB_PORT}
      PROFILE_DB_HOST: ${PROFILE_DB_HOST}
      PROFILE_SERVICE_PORT: ${PROFILE_SERVICE_PORT}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      CREATE_ORDER_COMMAND_SUBJECT: ${CREATE_ORDER_COMMAND_SUBJECT}
      CREATE_ORDER_REPLY_SUBJECT: ${CREATE_ORDER_REPLY_SUBJECT}      
    depends_on:
      - profile_db
    networks:
      - network

  connection_service:
    image: connection_service
    container_name: connection_service
    build:
      context: .
      dockerfile: ./backend/connection_service/Dockerfile
    restart: on-failure
    environment:
      CONNECTION_DB_PORT: ${CONNECTION_DB_PORT}
      CONNECTION_DB_HOST: ${CONNECTION_DB_HOST}
      CONNECTION_SERVICE_PORT: ${CONNECTION_SERVICE_PORT}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      CREATE_ORDER_COMMAND_SUBJECT: ${CREATE_ORDER_COMMAND_SUBJECT}
      CREATE_ORDER_REPLY_SUBJECT: ${CREATE_ORDER_REPLY_SUBJECT}      
    depends_on:
      - connection_db
    networks:
      - network

  post_service:
    image: post_service
    container_name: post_service
    build:
      context: .
      dockerfile: ./backend/post_service/Dockerfile
    restart: on-failure
    environment:
      POST_DB_PORT: ${POST_DB_PORT}
      POST_DB_HOST: ${POST_DB_HOST}
      POST_SERVICE_PORT: ${POST_SERVICE_PORT}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      CREATE_ORDER_COMMAND_SUBJECT: ${CREATE_ORDER_COMMAND_SUBJECT}
      CREATE_ORDER_REPLY_SUBJECT: ${CREATE_ORDER_REPLY_SUBJECT}      
    depends_on:
      - post_db
    networks:
      - network

  client:
      container_name: client
      build:
        context: .
        dockerfile: ./client/Dockerfile
      volumes:
        - './client:/app'
        - '/app/node_modules'
      ports:
        - 3001:3000
      environment:
        - CHOKIDAR_USEPOLLING=true

  connection_db:
    image: mongo
    container_name: connection_db
    restart: on-failure
    networks:
      - network

  post_db:
    image: mongo
    container_name: post_db
    restart: on-failure
    networks:
      - network

  authentication_db:
    image: mongo
    container_name: authentication_db
    restart: on-failure
    networks:
      - network

  profile_db:
    image: mongo
    container_name: profile_db
    restart: on-failure
    networks:
      - network

  nats:
    image: nats
    container_name: nats
    restart: on-failure
    networks:
      - network

networks:
  network:
    driver: bridge