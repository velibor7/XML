version: "3.8"

services:
  api_gateway:
    image: api_gateway
    container_name: api_gateway
    build:
      context: .
      dockerfile: ./backend/api_gateway/Dockerfile
    restart: on-failure
    ports:
      - ${GATEWAY_PORT}:${GATEWAY_PORT}
    environment:
      GATEWAY_PORT: ${GATEWAY_PORT}
      AUTHENTICATION_SERVICE_HOST: ${AUTHENTICATION_SERVICE_HOST}
      AUTHENTICATION_SERVICE_PORT: ${AUTHENTICATION_SERVICE_PORT}
      PROFILE_SERVICE_PORT: ${PROFILE_SERVICE_PORT}
      PROFILE_SERVICE_HOST: ${PROFILE_SERVICE_HOST}
      CONNECTION_SERVICE_PORT: ${CONNECTION_SERVICE_PORT}
      CONNECTION_SERVICE_HOST: ${CONNECTION_SERVICE_HOST}
      POST_SERVICE_PORT: ${POST_SERVICE_PORT}
      POST_SERVICE_HOST: ${POST_SERVICE_HOST}
      JOB_SERVICE_PORT: ${JOB_SERVICE_PORT}
      JOB_SERVICE_HOST: ${JOB_SERVICE_HOST}
      COMMENT_SERVICE_HOST: ${COMMENT_SERVICE_HOST}
      COMMENT_SERVICE_PORT: ${COMMENT_SERVICE_PORT}
    networks:
      - network

  authentication_service:
    image: authentication_service
    build:
      context: .
      dockerfile: ./backend/authentication_service/Dockerfile
    restart: on-failure
    environment:
      AUTH_DB_HOST: ${AUTHENTICATION_DB_HOST}
      AUTH_DB_PORT: ${AUTHENTICATION_DB_PORT}
      AUTH_SERVICE_PORT: ${AUTHENTICATION_SERVICE_PORT}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      PROFILE_SERVICE_PORT : ${PROFILE_SERVICE_PORT}
      PROFILE_SERVICE_HOST : ${PROFILE_SERVICE_HOST}
      CREATE_PROFILE_COMMAND_SUBJECT: ${CREATE_PROFILE_COMMAND_SUBJECT}
      CREATE_PROFILE_REPLY_SUBJECT: ${CREATE_PROFILE_REPLY_SUBJECT}
      UPDATE_PROFILE_COMMAND_SUBJECT: ${UPDATE_PROFILE_COMMAND_SUBJECT}
      UPDATE_PROFILE_REPLY_SUBJECT: ${UPDATE_PROFILE_REPLY_SUBJECT}
    depends_on:
      - authentication_db
    networks:
      - network

  profile_service:
    image: profile_service
    container_name: profile_service
    build:
      context: .
      dockerfile: ./backend/profile_service/Dockerfile
    restart: on-failure
    environment:
      PROFILE_DB_PORT: ${PROFILE_DB_PORT}
      PROFILE_DB_HOST: ${PROFILE_DB_HOST}
      PROFILE_SERVICE_PORT: ${PROFILE_SERVICE_PORT}
      COMMENT_SERVICE_HOST: ${COMMENT_SERVICE_HOST}
      COMMENT_SERVICE_PORT: ${COMMENT_SERVICE_PORT}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      CREATE_PROFILE_COMMAND_SUBJECT: ${CREATE_PROFILE_COMMAND_SUBJECT}
      CREATE_PROFILE_REPLY_SUBJECT: ${CREATE_PROFILE_REPLY_SUBJECT}
      UPDATE_PROFILE_COMMAND_SUBJECT: ${UPDATE_PROFILE_COMMAND_SUBJECT}
      UPDATE_PROFILE_REPLY_SUBJECT: ${UPDATE_PROFILE_REPLY_SUBJECT}         
    depends_on:
      - profile_db
    networks:
      - network

  job_service:
    image: job_service
    container_name: job_service
    build:
      context: .
      dockerfile: ./backend/job_service/Dockerfile
    restart: on-failure
    environment:
      NEO4J_URI: ${NEO4J_URI}
      NEO4J_USERNAME: ${NEO4J_USERNAME}
      NEO4J_PASSWORD : ${NEO4J_PASSWORD}
      JOB_SERVICE_PORT: ${JOB_SERVICE_PORT}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
    depends_on:
      - job_db
    networks:
      - network

  connection_service:
    image: connection_service
    container_name: connection_service
    build:
      context: .
      dockerfile: ./backend/connection_service/Dockerfile
    restart: on-failure
    environment:
      CONNECTION_DB_PORT: ${CONNECTION_DB_PORT}
      CONNECTION_DB_HOST: ${CONNECTION_DB_HOST}
      CONNECTION_SERVICE_PORT: ${CONNECTION_SERVICE_PORT}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}     
    depends_on:
      - connection_db
    networks:
      - network

  comment_service:
    image: comment_service
    container_name: comment_service
    build:
      context: .
      dockerfile: ./backend/comment_service/Dockerfile
    restart: on-failure
    environment:
      COMMENT_DB_HOST: ${COMMENT_DB_HOST}
      COMMENT_DB_PORT: ${COMMENT_DB_PORT}
      COMMENT_SERVICE_PORT: ${COMMENT_SERVICE_PORT}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      UPDATE_PROFILE_COMMAND_SUBJECT: ${UPDATE_PROFILE_COMMAND_SUBJECT}
      UPDATE_PROFILE_REPLY_SUBJECT: ${UPDATE_PROFILE_REPLY_SUBJECT}
    depends_on:
      - comment_db
    networks:
      - network

  post_service:
    image: post_service
    container_name: post_service
    build:
      context: .
      dockerfile: ./backend/post_service/Dockerfile
    restart: on-failure
    environment:
      POST_DB_PORT: ${POST_DB_PORT}
      POST_DB_HOST: ${POST_DB_HOST}
      POST_SERVICE_PORT: ${POST_SERVICE_PORT}
      COMMENT_SERVICE_HOST: ${COMMENT_SERVICE_HOST}
      COMMENT_SERVICE_PORT: ${COMMENT_SERVICE_PORT}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      UPDATE_PROFILE_COMMAND_SUBJECT: ${UPDATE_PROFILE_COMMAND_SUBJECT}
      UPDATE_PROFILE_REPLY_SUBJECT: ${UPDATE_PROFILE_REPLY_SUBJECT}    
    depends_on:
      - post_db
    networks:
      - network

  # client:
  #     container_name: client
  #     build:
  #       context: .
  #       dockerfile: ./client/Dockerfile
  #     volumes:
  #       - './client:/app'
  #       - '/app/node_modules'
  #     ports:
  #       - 3001:3000
  #     environment:
  #       - CHOKIDAR_USEPOLLING=true

  connection_db:
    image: mongo
    container_name: connection_db
    restart: on-failure
    networks:
      - network

  comment_db:
    image: mongo
    container_name: comment_db
    restart: on-failure
    networks:
      - network

  post_db:
    image: mongo
    container_name: post_db
    restart: on-failure
    networks:
      - network

  job_db:
    image: neo4j:4.3.3-community #4.3.3-community  latest
    container_name: neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
    networks:
      - network
    environment:
      - NEO4J_AUTH=neo4j/password
      - NEO4J_dbms_memory_pagecache_size=512M

  authentication_db:
    image: mongo
    container_name: authentication_db
    restart: on-failure
    networks:
      - network

  profile_db:
    image: mongo
    container_name: profile_db
    restart: on-failure
    networks:
      - network

  nats:
    image: nats
    container_name: nats
    restart: on-failure
    networks:
      - network

networks:
  network:
    driver: bridge